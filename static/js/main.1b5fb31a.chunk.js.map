{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DefaultValue","sortField","setSortField","isReversed","setIsReversed","sortedGoods","goods","preparedGoods","Length","sort","good1","good2","length","Alphabet","localeCompare","reverse","getPreparedGoods","isSortMetodSecelted","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,iBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,cAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAlCR,SACEC,EACAL,EACAE,GAEA,IAAKF,IAAcE,EACjB,OAAOG,EAGT,IAAMC,EAAa,YAAOD,GAE1B,GAAIL,EACF,OAAQA,GACN,KAAKL,EAASY,OACZD,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,OAASD,EAAMC,UAC1D,MACF,KAAKhB,EAASiB,SACZN,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,cAAcH,MACzD,MACF,QACE,OAAOJ,EAQb,OAJIJ,GACFI,EAAcQ,UAGTR,EAMaS,CAClBnB,EAAiBI,EAAWE,GAExBc,EAAsBhB,GAAaE,EAMzC,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAcL,EAASiB,WAErCQ,QAAS,kBAAMnB,EAAaN,EAASiB,WALvC,iCAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAcL,EAASY,SAErCa,QAAS,kBAAMnB,EAAaN,EAASY,SALvC,4BAUA,wBACEW,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAajB,IAEfkB,QAAS,kBAAMjB,GAAeD,IALhC,qBAUCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA1CgB,WACxBnB,EAAaN,EAASI,cACtBI,GAAc,IAqCR,sBAUJ,6BACGC,EAAYiB,KAAI,SAAAC,GAAI,OACnB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC/GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1b5fb31a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  DefaultValue = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  isReversed: boolean,\n) {\n  if (!sortField && !isReversed) {\n    return goods;\n  }\n\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortType.Length:\n        preparedGoods.sort((good1, good2) => good1.length - good2.length);\n        break;\n      case SortType.Alphabet:\n        preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n        break;\n      default:\n        return preparedGoods;\n    }\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.DefaultValue);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortedGoods = getPreparedGoods(\n    goodsFromServer, sortField, isReversed,\n  );\n  const isSortMetodSecelted = sortField || isReversed;\n  const handleButtonReset = () => {\n    setSortField(SortType.DefaultValue);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.Alphabet,\n          })}\n          onClick={() => setSortField(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.Length,\n          })}\n          onClick={() => setSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isSortMetodSecelted && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleButtonReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}